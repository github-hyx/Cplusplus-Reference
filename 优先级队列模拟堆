如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。
如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。
我们使用Insert()方法读取数据流，使用GetMedian()方法获取当前读取数据的中位数。
//////////////////////////////////////////////////////////////////////////////////////////

class Solution 
{
public:
    vector<double> result;
    void Insert(int num)
    {
        result.push_back(num);
    }

    double GetMedian()
    {
        sort(result.begin(),result.end());
        int size=result.size();
        if(size==0)
            return 0;
        if(size%2==1)//数据流奇数
            return result[(size)/2];
        else//数据流偶数
            return (result[size/2]+result[(size/2)-1])/2;
    
    }

};
////////////////////////////////////////////////////////////////////////////////////////////////////////////总结
方法，保证数据容器左边的数据都小于右边的数据，左边最大堆，右边最小堆。注意往最大堆和最小堆中插入数据的一些细节。


     * 插入有两种思路：
     * 1：直接插入大堆中，之后若两堆尺寸之差大于1(也就是2)，则从大堆中弹出堆顶元素并插入到小堆中
     * 若两队之差不大于1，则直接插入大堆中即可。
     * 2：奇数个数插入到大堆中，偶数个数插入到小堆中，
     * 但是 可能会出现当前待插入的数比小堆堆顶元素大，此时需要将元素先插入到小堆，然后将小堆堆顶元素弹出并插入到大堆中
     * 对于偶数时插入小堆的情况，一样的道理。why?
     * 因为要保证最大堆的元素要比最小堆的元素都要小。
     * @param num
     */
     
     剑指offer上解析是第2种思路，下面牛客网的参考解析类似第1种思路
     
     
      if(size&1)//数据流奇数
      
      size>>1 右移除以2，左移乘以2

///////////////////////////////////////////////////////////////////////////////////////////

用两个优先队列来模拟两个堆

class Solution {
    priority_queue<int, vector<int>, less<int> > p;
    priority_queue<int, vector<int>, greater<int> > q;
     
public:
    void Insert(int num){
        if(p.empty() || num <= p.top()) p.push(num);
        else q.push(num);
        if(p.size() == q.size() + 2) q.push(p.top()), p.pop();
        if(p.size() + 1 == q.size()) p.push(q.top()), q.pop();
    }
    double GetMedian(){ 
      return p.size() == q.size() ? (p.top() + q.top()) / 2.0 : p.top();
    }
};
///////////////////////////////////////////////////////////////////////////////////////////
/*
//弱弱的数据。。。
class Solution {
    vector<int> v;
    int n;
public:
    void Insert(int num){
        v.push_back(num);
        n = v.size();
        for(int i = n - 1; i > 0 && v[i] < v[i - 1]; --i) swap(v[i], v[i - 1]); 
    }
    double GetMedian(){ 
      return (v[(n - 1) >> 1] + v[n >> 1]) / 2.0;
    }
};
*/
///////////////////////////////////////////////////////////////////////////////////////////
