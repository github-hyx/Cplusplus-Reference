  /*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :val(x), next(NULL) {
	}
};*/      
  
        stack<ListNode*> nodes;
        ListNode* pNode=pHead;
        
        
        ListNode* pNode=new ListNode(a);
        
        ListNode* pNode=nullptr;
        pNode->val=a;
        pNode->next=nullptr;
        
        bool* visited=new bool[rows*cols];
        int* array=new int[10];  


1 int *x = new int;       //开辟一个存放整数的存储空间，返回一个指向该存储空间的地址(即指针)
2 int *a = new int(100);  //开辟一个存放整数的空间，并指定该整数的初值为100，返回一个指向该存储空间的地址
3 char *b = new char[10]; //开辟一个存放字符数组(包括10个元素)的空间，返回首元素的地址
4 float *p=new float (3.14159);//开辟一个存放单精度数的空间，并指定该实数的初值为//3.14159，将返回的该空间的地址赋给指针变量p

5 int *p = new int[rows*cols];//二维数组当成一维数组连续开辟的
0<=i<=rows-1;
0<=j<=cols-1;
[i,j]即p[i*col+j]

C++中new和delete的使用方法详解

new和delete运算符用于动态分配和撤销内存的运算符

new用法:

          1.     开辟单变量地址空间

               1)new int;  //开辟一个存放数组的存储空间,返回一个指向该存储空间的地址.int *a = new int 即为将一个int类型的地址赋值给整型指针a.

               2)int *a = new int(5) 作用同上,但是同时将整数赋值为5

          2.     开辟数组空间

               一维: int *a = new int[100];开辟一个大小为100的整型数组空间

               二维: int **a = new int[5][6]

               三维及其以上:依此类推.

         一般用法: new 类型 [初值]

delete用法:

          1. int *a = new int;

               delete a;   //释放单个int的空间

          2.int *a = new int[5];

               delete [] a; //释放int数组空间

          要访问new所开辟的结构体空间,无法直接通过变量名进行,只能通过赋值的指针进行访问.

          用new和delete可以动态开辟,撤销地址空间.在编程序时,若用完一个变量(一般是暂时存储的数组),下次需要再用,但却又想省去重新初始化的功夫,可以在每次开始使用时开辟一个空间,在用完后撤销它.
