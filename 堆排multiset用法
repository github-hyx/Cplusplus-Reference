输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。

思路二：利用堆排序，O(N logK)，适合处理海量数据
(1) 遍历输入数组，将前k个数插入到推中；（利用multiset来做为堆的实现）
(2) 继续从输入数组中读入元素做为待插入整数，并将它与堆中最大值比较：如果待插入的值比当前已有的最大值小，则用这个数替换当前已有的最大值；如果待插入的值比当前已有的最大值还大，则抛弃这个数，继续读下一个数。
这样动态维护堆中这k个数，以保证它只储存输入数组中的前k个最小的数，最后输出堆即可。

class Solution {
public:
    vector<int> GetLeastNumbers_Solution(vector<int> input, int k)
    {
        vector<int> result;
        int len = input.size();
        if(input.empty() || k<=0 || len < k) return result;
         
        multiset<int, greater<int> > leastNumbers; // 从大到小排序
        multiset<int, greater<int> >::iterator iterGreater; // 定义迭代器
         
        vector<int>::iterator iter = input.begin();
        for(; iter != input.end(); ++iter)
        {
            // 将前k个数直接插入进multiset中，注意是小于K
            if(leastNumbers.size() < k)
            {
                leastNumbers.insert(*iter);
            }
            else
            {
                // 因为设置的从大到小排序，故multiset中第一个位置的元素即为最大值
                iterGreater = leastNumbers.begin();
                 
                // 如果input中当前元素比multiset中最大元素小，则替换；即保持multiset中这k个元素是最小的。
                if(*iter < *(leastNumbers.begin()))
                {
                    // 替换掉当前最大值
                    leastNumbers.erase(iterGreater);
                    leastNumbers.insert(*iter);
                }
            }
        }
         
        for(iterGreater = leastNumbers.begin();iterGreater!=leastNumbers.end();++iterGreater)
        {
            result.push_back(*iterGreater); // 将multiset中这k个元素输出
        }
         
        return result;
    }
};


如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。
如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。
我们使用Insert()方法读取数据流，使用GetMedian()方法获取当前读取数据的中位数。
//////////////////////////////////////////////////////////////////////////////////////////

class Solution 
{
public:
    vector<double> result;
    void Insert(int num)
    {
        result.push_back(num);
    }

    double GetMedian()
    {
        sort(result.begin(),result.end());
        int size=result.size();
        if(size==0)
            return 0;
        if(size%2==1)//数据流奇数
            return result[(size)/2];
        else//数据流偶数
            return (result[size/2]+result[(size/2)-1])/2;
    
    }

};
////////////////////////////////////////////////////////////////////////////////////////////////////////////总结
方法，保证数据容器左边的数据都小于右边的数据，左边最大堆，右边最小堆。注意往最大堆和最小堆中插入数据的一些细节。


     * 插入有两种思路：
     * 1：直接插入大堆中，之后若两堆尺寸之差大于1(也就是2)，则从大堆中弹出堆顶元素并插入到小堆中
     * 若两队之差不大于1，则直接插入大堆中即可。
     * 2：奇数个数插入到大堆中，偶数个数插入到小堆中，
     * 但是 可能会出现当前待插入的数比小堆堆顶元素大，此时需要将元素先插入到小堆，然后将小堆堆顶元素弹出并插入到大堆中
     * 对于偶数时插入小堆的情况，一样的道理。why?
     * 因为要保证最大堆的元素要比最小堆的元素都要小。
     * @param num
     */
     
     剑指offer上解析是第2种思路，下面牛客网的参考解析类似第1种思路
     
     
      if(size&1)//数据流奇数
      
      size>>1 右移除以2，左移乘以2

///////////////////////////////////////////////////////////////////////////////////////////

用两个优先队列来模拟两个堆

class Solution {
    priority_queue<int, vector<int>, less<int> > p;
    priority_queue<int, vector<int>, greater<int> > q;
     
public:
    void Insert(int num){
        if(p.empty() || num <= p.top()) p.push(num);
        else q.push(num);
        if(p.size() == q.size() + 2) q.push(p.top()), p.pop();
        if(p.size() + 1 == q.size()) p.push(q.top()), q.pop();
    }
    double GetMedian(){ 
      return p.size() == q.size() ? (p.top() + q.top()) / 2.0 : p.top();
    }
};
///////////////////////////////////////////////////////////////////////////////////////////
/*
//弱弱的数据。。。
class Solution {
    vector<int> v;
    int n;
public:
    void Insert(int num){
        v.push_back(num);
        n = v.size();
        for(int i = n - 1; i > 0 && v[i] < v[i - 1]; --i) swap(v[i], v[i - 1]); 
    }
    double GetMedian(){ 
      return (v[(n - 1) >> 1] + v[n >> 1]) / 2.0;
    }
};
*/
///////////////////////////////////////////////////////////////////////////////////////////
